name: Build Komodo Launcher

on:
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qtbase5-dev qtbase5-dev-tools qt5-qmake qttools5-dev-tools build-essential wget patchelf

      - name: Download and Extract linuxdeployqt
        run: |
          wget -c https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
          chmod +x linuxdeployqt-continuous-x86_64.AppImage
          # Extract the AppImage
          ./linuxdeployqt-continuous-x86_64.AppImage --appimage-extract
          # The extracted files are in a directory named 'squashfs-root'
          mv squashfs-root linuxdeployqt

      - name: Build and Bundle Application
        run: |
          # Build the application
          mkdir build
          cd build
          qmake ../LauncherApp.pro
          make
          cd ..

          # Create an AppDir for bundling
          mkdir AppDir
          cp build/LauncherApp AppDir/

          # Use extracted linuxdeployqt to bundle dependencies without creating an AppImage
          linuxdeployqt/AppRun AppDir/LauncherApp -bundle-non-qt-libs

          # Compress the AppDir into a tar.gz archive
          tar czf LauncherApp-linux.tar.gz AppDir/

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: KomodoLauncher-linux
          path: LauncherApp-linux.tar.gz

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download OpenSSL DLLs
        shell: cmd
        run: |
          curl -L -o openssl.exe https://slproweb.com/download/Win64OpenSSL_Light-1_1_1w.exe
          openssl.exe /silent /dir=C:\OpenSSL-Win64

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.15.2'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          dir: 'C:\\Qt'

      - name: Build and Bundle Application
        shell: cmd
        env:
          QT_DIR: C:\Qt\Qt\5.15.2\msvc2019_64
        run: |
          REM Find Visual Studio installation path
          for /f "tokens=*" %%i in ('"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath') do (
            set "VS_PATH=%%i"
          )
          echo VS_PATH=%VS_PATH%
          if not defined VS_PATH (
            echo Error: Visual Studio path not found.
            exit /b 1
          )

          REM Set up MSVC environment
          call "%VS_PATH%\VC\Auxiliary\Build\vcvars64.bat"
          echo MSVC Environment set

          REM Build the project
          mkdir build
          cd build
          "%QT_DIR%\bin\qmake.exe" ..\LauncherApp.pro
          if errorlevel 1 (
            echo qmake failed with exit code %errorlevel%
            exit /b %errorlevel%
          )
          nmake
          if errorlevel 1 (
            echo nmake failed with exit code %errorlevel%
            exit /b %errorlevel%
          )
          cd ..

          REM Bundle the application with windeployqt
          set PATH=%QT_DIR%\bin;%PATH%
          "%QT_DIR%\bin\windeployqt.exe" --verbose 0 --compiler-runtime build\release\LauncherApp.exe

          REM Copy the executable and DLLs to a 'bundle' directory
          mkdir bundle
          xcopy build\release\LauncherApp.exe bundle\ /Y
          xcopy build\release\*.dll bundle\ /Y

          REM Optionally, include additional Qt plugins if needed (e.g., platforms)
          if exist build\release\platforms (
            xcopy build\release\platforms bundle\platforms\ /E /Y
          )

          REM Copy OpenSSL DLLs to the bundle directory
          set OPENSSL_DIR=C:\OpenSSL-Win64\bin
          xcopy "%OPENSSL_DIR%\libcrypto-1_1-x64.dll" bundle\ /Y
          xcopy "%OPENSSL_DIR%\libssl-1_1-x64.dll" bundle\ /Y

          REM Create a ZIP archive
          powershell Compress-Archive -Path bundle\* -DestinationPath LauncherApp-windows.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: KomodoLauncher-windows
          path: LauncherApp-windows.zip
